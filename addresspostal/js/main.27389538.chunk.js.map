{"version":3,"sources":["components/WithGoogleApi.js","components/GmapsAddressInput.js","components/GmapsWindow.js","components/GmapsAutocomplete.js","components/messages.js","components/ChipAreaSelect.js","components/utils.js","components/ChipAreaPicker.js","components/GmapsAreaWindow.js","components/GmapsAddress.js","components/LanguageProvider.js","components/App.js","index.js"],"names":["GmapsContext","React","createContext","ApiInstaller","withScriptjs","props","render","WithGoogleApi","apiKey","loadingComponent","children","react_default","a","createElement","Provider","value","googleMapURL","concat","loadingElement","defaultProps","MarkerAnimations","BOUNCE","google","maps","Animation","SMALL_DROP","Vm","DROP","RARITA","Xm","getGmapsMarkerInstance","markerComponentRef","current","state","useStyles","makeStyles","theme","root","padding","spacing","display","forwardRef","ref","inputProps","Object","objectWithoutProperties","Input","assign","aria-label","inputRef","withGoogleMap","markerRef","useRef","useEffect","setAnimation","mapPosition","onMarkerDragEnd","event","react_google_maps_lib","zoom","center","onClick","ev","draggable","key","onDragEnd","onDragStart","position","lat","markerPosition","lng","visible","GmapsAutocomplete","setupInputToSelectFirstOnEnter","input","_addEventListener","addEventListener","attachEvent","addEventListenerWrapper","type","listener","newListener","origListener","suggestionSelected","document","getElementsByClassName","length","which","simulatedDownarrow","KeyboardEvent","keyCode","bubbles","cancelBubble","cancelable","isTrusted","apply","this","refs","esm_get","getPrototypeOf","prototype","call","_this$props","inputComponent","InputComponent","ReactGoogleAutocomplete","propTypes","componentRestrictions","PropTypes","object","types","array","bounds","fields","onPlaceSelected","func","elementType","country","defineMessages","addNewArea","id","defaultMessage","flexWrap","width","formControl","chips","chip","margin","noLabel","marginTop","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","getStyles","list","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","ChipAreaSelect","classes","useTheme","options","currentSelection","onChange","onAddNewArea","handleDelete","filter","x","className","FormControl","InputLabel","htmlFor","Select","multiple","fullWidth","selection","target","values","renderValue","selected","map","Chip","onDelete","label","caption","MenuItem","fontStyle","react_intl_lib","messages","area","useMultiStyles","styles","objStyles","keys","classesStyles","k","startsWith","substr","reduce","o","[object Object]","classNameStyles","objectSpread2","extendViewport","viewport","coords","sw","ne","getMapViewportFromAreas","areas","boundary","polyViewport","polygon","pv","validLocation","loc","isNumber","getProp","validArea","p","alignSelf","box","textAlign","divider","height","chipSkeleton","backgroundColor","palette","primary","light","borderRadius","dividerSkeleton","fabSkeleton","ChipAreaPicker","handleChipClick","userAreaOptions","onEnterEditMode","onCancel","loading","icons","LocationCity_default","Terrain_default","Map_default","Edit_default","Clear_default","Box","toConsumableArray","Array","i","Skeleton","variant","level","clickable","icon","color","Divider","orientation","Fab","size","polyColors","mapViewport","mapRef","polyRefs","createRef","handleRightClick","areaId","e","console","log","undefined","vertex","vertexId","poly","splice","onAreaChange","onAreaRemove","updateAreaPolyOnVertexRemove","handleMouseUp","path","getPath","g","updateAreaPolyOnVertexAdditionOrDrag","isEmpty","latlngBounds","LatLngBounds","fitBounds","boundaries","b","strokeWeight","strokeOpacity","strokeColor","fillOpacity","fillColor","editable","onRightClick","onMouseUp","animation","Geocode","enableDebug","TheHeartOfKendall","GmapsAddress","_this","classCallCheck","_super","dataJustLoaded","prevData","newData","getStateFromProps","_ref","asyncToGenerator","regenerator_default","mark","_callee","currentAreaSelection","address","geoResp","wrap","_context","prev","next","areaMode","isArray","abrupt","heart","fromLatLng","sent","getStreetAddrPartsFromGeoResult","results","stop","_x","arguments","geoResult","addressArray","address_components","find","some","t","includes","long_name","city","formatted_address","handleMarkerDragEnd","_ref2","_callee2","newLat","newLng","geoCodeResp","_context2","latLng","setState","saveInStateStreetAddressDetails","getUserAreaOptionsFromGeocodeResponse","showChipAreaPicker","_x2","updateMapPos","location","_ref3","_callee3","place","placeAddress","latValue","lngValue","_context3","geometry","_x3","levels","minLevel","exactResult","r","Math","max","findIndex","l","_loop","levelType","z","_r$geometry$bounds$no","northeast","_r$geometry$bounds$so","southwest","y","push","handleAddressChange","captureCurrentLocationFromNavigator","_callee4","_context4","Promise","resolve","navigator","geolocation","getCurrentPosition","latitude","longitude","handleShowMapToggle","_callee5","_this$state","showMap","mapFirstShowing","currentLocation","currentLocationSetting","_context5","t1","t0","handleAreaSelection","updatedAreaSelection","handleAddNewArea","_callee6","areaOptionsFromCurrentLocation","_currentLocation","_context6","showChipAreaSelect","loadingUserAreaOptions","addNewUserArea","newUserArea","addedUserAreasUpdate","addedUserAreas","currentAreaSelectionUpdate","handleAreaRemoveOnMapWindow","handleAreaChangeOnMapWindow","updatedPolygon","update","handleEnterEditMode","handleChipAreaPickerCancel","setApiKey","showAddressInput","_callee7","newState","_context7","_callee8","prevProps","prevState","mapUpdates","mapViewportCenter","_context8","inputPlaceholder","_this$state2","boundariesAndUserAreas","components_GmapsAutocomplete","placeholder","iconButton","IconButton","PinDrop_default","GmapsAreaWindow","containerElement","mapElement","GmapsWindow","Component","GmapsAddressInput","withStyles","gmapsWindow","marginBottom","BaseComp","comp","Consumer","displayName","withGmapsContext","LanguageProvider","formats","number","USD","currency","defaultFormats","locale","Children","only","PureComponent","paper","marginLeft","component","sections","sampleData","vendorStreetAddress","vendorServiceAreas","App","_useState","useState","_useState2","slicedToArray","streetAddr","setStreetAddr","_useState3","_useState4","Paper","LanguageProvider_LanguageProvider","Typography","components_GmapsAddress","components_App","getElementById"],"mappings":"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","file":"static/js/main.27389538.chunk.js","sourcesContent":["/* global google */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { withScriptjs } from 'react-google-maps'\n\nexport const GmapsContext = React.createContext('')\n\nfunction ChildWrapper(props) {\n  return props.render()\n}\n\nconst ApiInstaller = withScriptjs(ChildWrapper)\n\nexport default function WithGoogleApi(props) {\n  const { apiKey, loadingComponent, children } = props\n  return (\n    <GmapsContext.Provider value={apiKey}>\n      <ApiInstaller\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places,geometry`}\n        loadingElement={loadingComponent}\n        render={() => children}\n      />\n    </GmapsContext.Provider>\n  )\n}\n\nWithGoogleApi.propTypes = {\n  apiKey: PropTypes.string,\n  loadingComponent: PropTypes.element,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.array]).isRequired,\n}\nWithGoogleApi.defaultProps = {\n  loadingComponent: <div />,\n}\n\n// HOC fror consuming the gmaps context on class components\nexport function withGmapsContext(BaseComp) {\n  const comp = React.forwardRef((props, ref) => (\n    <GmapsContext.Consumer>{apiKey => <BaseComp {...props} apiKey={apiKey} ref={ref} />}</GmapsContext.Consumer>\n  ))\n  comp.displayName = 'WithGmapsContext'\n  return comp\n}\n\n// common stuffs\nconst SECRET_MARKER_KEY = '__SECRET_MARKER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED'\nexport const MarkerAnimations = {\n  get BOUNCE() {\n    return google.maps.Animation.BOUNCE\n  },\n  get SMALL_DROP() {\n    return google.maps.Animation.Vm\n  },\n  get DROP() {\n    return google.maps.Animation.DROP\n  },\n  get RARITA() {\n    return google.maps.Animation.Xm\n  },\n}\nexport const getGmapsMarkerInstance = markerComponentRef => markerComponentRef.current.state[SECRET_MARKER_KEY]\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Input } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // padding: '2px 4px',\n    padding: theme.spacing(1),\n    // display: 'flex',\n    display: 'inline-block',\n    // alignItems: 'center',\n  },\n}))\n\nfunction GmapsAddressInput(props, ref) {\n  const classes = useStyles()\n  const { inputProps, ...others } = props\n\n  return <Input inputProps={{ 'aria-label': 'search google maps' }} inputRef={ref} {...inputProps} />\n}\n\nexport default React.forwardRef(GmapsAddressInput)\n","import React, { useRef, useEffect } from 'react'\nimport { withGoogleMap, GoogleMap, Marker } from 'react-google-maps'\nimport { getGmapsMarkerInstance, MarkerAnimations } from './WithGoogleApi'\n\nexport default withGoogleMap(props => {\n  const markerRef = useRef()\n  useEffect(() => {\n    getGmapsMarkerInstance(markerRef).setAnimation(MarkerAnimations.SMALL_DROP)\n  }, [props.mapPosition])\n\n  const onMarkerDragStart = () => {\n    getGmapsMarkerInstance(markerRef).setAnimation(MarkerAnimations.BOUNCE)\n  }\n  const onMarkerDragEnd = event => {\n    props.onMarkerDragEnd(event)\n    getGmapsMarkerInstance(markerRef).setAnimation(MarkerAnimations.SMALL_DROP)\n  }\n  return (\n    <GoogleMap zoom={props.zoom} google={props.google} center={props.mapPosition} onClick={ev => onMarkerDragEnd(ev)}>\n      <Marker\n        draggable\n        google={props.google}\n        key={0}\n        onDragEnd={onMarkerDragEnd}\n        onDragStart={onMarkerDragStart}\n        position={{ lat: props.markerPosition.lat, lng: props.markerPosition.lng }}\n        ref={markerRef}\n        visible\n      />\n    </GoogleMap>\n  )\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ReactGoogleAutocomplete from 'react-google-autocomplete'\n\nclass GmapsAutocomplete extends ReactGoogleAutocomplete {\n  componentDidMount() {\n    if (this.refs.input) this.setupInputToSelectFirstOnEnter(this.refs.input)\n    super.componentDidMount()\n  }\n\n  setupInputToSelectFirstOnEnter = input => {\n    // store the original event binding function\n    const _addEventListener = input.addEventListener ? input.addEventListener : input.attachEvent\n    function addEventListenerWrapper(type, listener) {\n      // Simulate a 'down arrow' keypress on hitting 'return' when no pac suggestion is selected,\n      // and then trigger the original listener.\n      let newListener = listener\n      if (type === 'keydown') {\n        const origListener = listener\n        newListener = function(event) {\n          // const suggestionSelected = $('.pac-item-selected').length > 0\n          const suggestionSelected = document.getElementsByClassName('pac-item-selected').length > 0\n          if (event.which === 13 && !suggestionSelected) {\n            const simulatedDownarrow = new KeyboardEvent('keydown', {\n              keyCode: 40,\n              which: 40,\n              bubbles: true,\n              cancelBubble: false,\n              cancelable: true,\n              isTrusted: true,\n            })\n            origListener.apply(input, [simulatedDownarrow])\n          }\n          origListener.apply(input, [event])\n        }\n      }\n\n      _addEventListener.apply(input, [type, newListener])\n    }\n    input.addEventListener = addEventListenerWrapper\n    input.attachEvent = addEventListenerWrapper\n  }\n\n  render() {\n    // eslint-disable-next-line no-unused-vars\n    const { inputComponent, inputProps } = this.props\n    const InputComponent = inputComponent\n    // eslint-disable-next-line react/no-string-refs\n    return <InputComponent ref=\"input\" inputProps={inputProps} />\n  }\n}\n\nGmapsAutocomplete.propTypes = {\n  componentRestrictions: PropTypes.object,\n  types: PropTypes.array,\n  bounds: PropTypes.object,\n  fields: PropTypes.array,\n  onPlaceSelected: PropTypes.func,\n  inputComponent: PropTypes.elementType,\n  inputProps: PropTypes.object,\n}\nGmapsAutocomplete.defaultProps = {\n  componentRestrictions: { country: 'fr' },\n  types: ['geocode', 'establishment'],\n  inputComponent: 'input',\n  inputProps: {},\n}\n\nexport default GmapsAutocomplete\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  addNewArea: {\n    id: 'app.components.ChipAreaSelect.addNewArea',\n    defaultMessage: 'Add New Area...',\n  },\n})\n","import isEmpty from 'lodash/isEmpty'\nimport React from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport Chip from '@material-ui/core/Chip'\nimport PropTypes from 'prop-types'\nimport { FormattedMessage } from 'react-intl'\nimport messages from './messages'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%',\n  },\n  formControl: {\n    // margin: theme.spacing(1),\n    // minWidth: 350,\n    // maxWidth: '100%',\n    width: '100%',\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: 2,\n  },\n  noLabel: {\n    marginTop: theme.spacing(3),\n  },\n}))\n\nconst ITEM_HEIGHT = 48\nconst ITEM_PADDING_TOP = 8\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n}\n\nfunction getStyles(value, list, theme) {\n  return {\n    fontWeight: list.indexOf(value) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium,\n  }\n}\n\nexport default function ChipAreaSelect(props) {\n  const classes = useStyles()\n  const theme = useTheme()\n\n  const { options, currentSelection, onChange, onAddNewArea } = props\n\n  function handleChange(event) {\n    const selection = event.target.value\n    const values = selection.filter(x => x !== 'addNewAreaAction')\n    if (values.length !== selection.length) {\n      // props.onChange(selection)\n      // Show google maps input field\n      onAddNewArea()\n      return\n    }\n    onChange(values)\n  }\n\n  function handleDelete(value) {\n    return () => onChange(currentSelection.filter(x => x !== value))\n  }\n\n  return (\n    <div className={classes.root}>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"select-multiple-chip\">Service Areas</InputLabel>\n        <Select\n          multiple\n          fullWidth\n          value={currentSelection}\n          onChange={handleChange}\n          input={<Input id=\"select-multiple-chip\" />}\n          renderValue={selected => (\n            <div className={classes.chips}>\n              {selected.map((value, id) => (\n                <Chip onDelete={handleDelete(value)} key={id} label={value.caption} className={classes.chip} />\n              ))}\n            </div>\n          )}\n          MenuProps={MenuProps}\n        >\n          <MenuItem\n            key=\"addNewAreaAction\"\n            value=\"addNewAreaAction\"\n            style={{\n              fontWeight: theme.typography.fontWeightMedium,\n              fontStyle: 'italic',\n            }}\n          >\n            <FormattedMessage {...messages.addNewArea} />\n          </MenuItem>\n          {options.map((area, id) => (\n            <MenuItem\n              key={id}\n              value={area}\n              style={getStyles(area.caption, currentSelection.map(x => x.caption), theme)}\n            >\n              {area.caption}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  )\n}\n\nChipAreaSelect.propTypes = {\n  options: PropTypes.array,\n}\n\nChipAreaSelect.defaultProps = {\n  options: [],\n}\n","import { makeStyles, useTheme } from '@material-ui/core/styles'\nimport isNumber from 'lodash/isNumber'\nimport getProp from 'lodash/get'\n\nexport const useMultiStyles = (styles, props) => {\n  const theme = useTheme()\n  const objStyles = typeof styles === 'function' ? styles(theme) : styles\n  const keys = Object.keys(objStyles)\n  const classesStyles = keys\n    .filter(k => k.startsWith('$'))\n    .map(k => k.substr(1))\n    .reduce(\n      (o, k) =>\n        Object.assign(o, {\n          [k]: makeStyles(objStyles[`$${k}`])(props),\n        }),\n      {}\n    )\n  const classNameStyles = keys\n    .filter(k => !k.startsWith('$'))\n    .reduce(\n      (o, k) =>\n        Object.assign(o, {\n          [k]: objStyles[k],\n        }),\n      {}\n    )\n  return {\n    ...classesStyles,\n    ...makeStyles(classNameStyles)(props),\n  }\n}\n\nconst extendViewport = (viewport, coords) => {\n  if (!viewport)\n    return {\n      sw: { lat: coords.lat, lng: coords.lng },\n      ne: { lat: coords.lat, lng: coords.lng },\n    }\n  const { sw, ne } = viewport\n  if (coords.lat > ne.lat) ne.lat = coords.lat\n  if (coords.lng > ne.lng) ne.lng = coords.lng\n  if (coords.lat < sw.lat) sw.lat = coords.lat\n  if (coords.lng < sw.lng) sw.lng = coords.lng\n  return viewport\n}\n\nexport const getMapViewportFromAreas = areas =>\n  areas.reduce((viewport, boundary) => {\n    const polyViewport = boundary.polygon.reduce((pv, coords) => extendViewport(pv, coords), null)\n    // the winner\n    return Object.assign(viewport || {}, extendViewport(extendViewport(viewport, polyViewport.sw), polyViewport.ne))\n  }, null)\n\nexport const validLocation = loc => isNumber(getProp(loc, 'lat')) && isNumber(getProp(loc, 'lng'))\n\nexport const validArea = area =>\n  validLocation(getProp(area, 'heart')) && getProp(area, 'polygon', []).filter(p => validLocation(p)).length > 2\n","import React from 'react'\nimport { Chip, Box, Fab, Divider } from '@material-ui/core'\n// import { makeStyles } from '@material-ui/core/styles'\nimport LocationCityIcon from '@material-ui/icons/LocationCity'\nimport Cancel from '@material-ui/icons/Clear'\nimport TerrainIcon from '@material-ui/icons/Terrain'\nimport MapIcon from '@material-ui/icons/Map'\nimport Edit from '@material-ui/icons/Edit'\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport { PropTypes } from 'prop-types'\nimport { useMultiStyles } from './utils'\n\nconst styles = theme => ({\n  chip: {\n    margin: theme.spacing(1),\n    alignSelf: 'center',\n  },\n  box: {\n    width: '100%',\n    textAlign: 'center',\n    display: 'flex',\n  },\n  divider: {\n    // height: 28,\n    // margin: 4,\n    height: '80%',\n    margin: '4px',\n    width: '1px',\n  },\n  chipSkeleton: {\n    margin: theme.spacing(1),\n    alignSelf: 'center',\n    backgroundColor: `${theme.palette.primary.light}80`,\n    borderRadius: 16,\n  },\n  dividerSkeleton: {\n    backgroundColor: 'primary', // '#3f51b560',\n    margin: '4px',\n  },\n  fabSkeleton: {\n    margin: theme.spacing(1),\n    alignSelf: 'center',\n    backgroundColor: `${theme.palette.primary.light}80`,\n  },\n})\n\nexport default function ChipAreaPicker(props) {\n  const classes = useMultiStyles(styles)\n  const { handleChipClick, userAreaOptions, onEnterEditMode, onCancel, loading } = props\n  const icons = [<LocationCityIcon />, <TerrainIcon />, <MapIcon />, <Edit />, <Cancel />]\n  return (\n    <Box className={classes.box}>\n      {loading\n        ? [...Array(3)].map((x, i) => (\n            <Skeleton variant=\"rect\" width={128} height={32} className={classes.chipSkeleton} />\n          ))\n        : userAreaOptions.map(o => (\n            <Chip\n              key={o.level}\n              clickable\n              onClick={() => handleChipClick(o)}\n              icon={icons[o.level]}\n              className={classes.chip}\n              label={o.caption}\n              color=\"primary\"\n            />\n          ))}\n      {loading ? (\n        <Skeleton variant=\"rect\" width={1} height={45} className={classes.dividerSkeleton} />\n      ) : (\n        <Divider className={classes.divider} orientation=\"vertical\" />\n      )}\n      {loading\n        ? [\n            <Skeleton variant=\"circle\" width={40} height={40} className={classes.fabSkeleton} />,\n            <Skeleton variant=\"circle\" width={40} height={40} className={classes.fabSkeleton} />,\n          ]\n        : [\n            <Fab\n              key=\"editAddress\"\n              // clickable\n              onClick={() => onEnterEditMode()}\n              className={classes.chip}\n              color=\"primary\"\n              size=\"small\"\n            >\n              {icons[icons.length - 2]} {/* // The last element is the \"go back to edit\" button... */}\n            </Fab>,\n            <Fab\n              key=\"cancel\"\n              // clickable\n              onClick={() => onCancel()}\n              className={classes.chip}\n              // color=\"primary\"\n              size=\"small\"\n            >\n              {icons[icons.length - 1]} {/* // The last element is the \"go back to edit\" button... */}\n            </Fab>,\n          ]}\n    </Box>\n  )\n}\n\nChipAreaPicker.propTypes = {\n  handleChipClick: PropTypes.func,\n  areas: PropTypes.shape({\n    area: PropTypes.string,\n    city: PropTypes.string,\n    state: PropTypes.string,\n  }),\n}\n","/* global google */\nimport isEmpty from 'lodash/isEmpty'\nimport React, { useState, useRef, createRef, useEffect } from 'react'\nimport {\n  withGoogleMap,\n  GoogleMap,\n  Polygon,\n  // withScriptjs,\n  // InfoWindow,\n  Marker,\n} from 'react-google-maps'\nimport { getGmapsMarkerInstance, MarkerAnimations } from './WithGoogleApi'\n\n// let nextMarkerId = 1\n\nconst polyColors = ['rebeccapurple', 'fuchsia', 'aqua', 'darkkhaki', 'lightsalmon', 'hotpink', 'brown']\n\nexport default withGoogleMap(props => {\n  const { mapViewport } = props\n  const mapRef = useRef()\n  const polyRefs = useRef([...Array(props.areas.length)].map(() => createRef()))\n  const markerRef = useRef()\n\n  useEffect(() => {\n    if (!isEmpty(mapViewport)) {\n      console.log('mapViewport', mapViewport) // eslint-disable-line no-console\n      const latlngBounds = new google.maps.LatLngBounds(mapViewport.sw, mapViewport.ne)\n      mapRef.current.fitBounds(latlngBounds)\n    }\n  }, [mapViewport])\n\n  useEffect(() => {\n    getGmapsMarkerInstance(markerRef).setAnimation(MarkerAnimations.SMALL_DROP)\n  }, [props.mapPosition])\n\n  function updateAreaPolyOnVertexRemove(areaId, vertexId) {\n    if (props.areas[areaId].polygon.length === 3) {\n      props.onAreaRemove(areaId)\n      return\n    }\n    const poly = [...props.areas[areaId].polygon]\n    poly.splice(vertexId, 1)\n    props.onAreaChange(areaId, poly)\n  }\n\n  function handleRightClick(areaId) {\n    return e => {\n      console.log('right click', e)\n      if (e.vertex !== undefined) {\n        updateAreaPolyOnVertexRemove(areaId, e.vertex)\n      }\n    }\n  }\n\n  function updateAreaPolyOnVertexAdditionOrDrag(areaId) {\n    const polyRef = polyRefs.current[areaId]\n    const poly = polyRef.current.getPath().g.map(x => ({ lat: x.lat(), lng: x.lng() }))\n    props.onAreaChange(areaId, poly)\n  }\n\n  function handleMouseUp(areaId) {\n    return e => {\n      console.log('mouse up', e)\n      if (e.path !== undefined && e.vertex === undefined) {\n        updateAreaPolyOnVertexAdditionOrDrag(areaId)\n      }\n    }\n  }\n\n  const onMarkerDragStart = () => {\n    getGmapsMarkerInstance(markerRef).setAnimation(MarkerAnimations.BOUNCE)\n  }\n  const onMarkerDragEnd = event => {\n    props.onMarkerDragEnd(event)\n    getGmapsMarkerInstance(markerRef).setAnimation(MarkerAnimations.SMALL_DROP)\n  }\n  // const onMapClick = event => {\n  //   props.onMarkerDragEnd(event)\n  //   getGmapsMarkerInstance(markerRef).setAnimation(MarkerAnimations.SMALL_DROP)\n  // }\n\n  console.log('did 1')\n  return (\n    <GoogleMap ref={mapRef} google={props.google} center={props.mapPosition} onClick={ev => onMarkerDragEnd(ev)}>\n      {props.boundaries &&\n        props.boundaries.map(b => (\n          <Polygon\n            key={b.caption}\n            path={b.polygon}\n            options={{\n              clickable: false,\n              strokeWeight: 2,\n              strokeOpacity: 0.5,\n              strokeColor: 'green',\n              fillOpacity: 0.05,\n              fillColor: 'lime',\n            }}\n          />\n        ))}\n      {props.areas &&\n        props.areas.map((area, id) => (\n          <Polygon\n            key={area.caption}\n            path={area.polygon}\n            editable\n            options={{\n              clickable: true,\n              strokeWeight: 2,\n              strokeColor: polyColors[id % 7],\n              fillColor: polyColors[id % 7],\n              fillOpacity: 0.05,\n            }}\n            onRightClick={handleRightClick(id)}\n            ref={polyRefs.current[id]}\n            onMouseUp={handleMouseUp(id)}\n          />\n        ))}\n      <Marker\n        animation={google.maps.Animation.DROP}\n        draggable\n        google={props.google}\n        key={0}\n        onDragEnd={onMarkerDragEnd}\n        onDragStart={onMarkerDragStart}\n        position={{ lat: props.markerPosition.lat, lng: props.markerPosition.lng }}\n        ref={markerRef}\n        visible\n      />\n    </GoogleMap>\n  )\n})\n","/* eslint-disable react/no-unused-state */\nimport isEmpty from 'lodash/isEmpty'\nimport getProp from 'lodash/get'\nimport React, { Component, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport Geocode from 'react-geocode'\nimport { Chip, Paper, IconButton } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles'\nimport PinDrop from '@material-ui/icons/PinDrop'\nimport { withGmapsContext } from './WithGoogleApi'\nimport GmapsAddressInput from './GmapsAddressInput'\nimport GmapsWindow from './GmapsWindow'\nimport GmapsAutocomplete from './GmapsAutocomplete'\nimport ChipAreaSelect from './ChipAreaSelect'\nimport ChipAreaPicker from './ChipAreaPicker'\nimport GmapsAreaWindow from './GmapsAreaWindow'\nimport { validLocation, validArea, getMapViewportFromAreas } from './utils'\n\nGeocode.enableDebug()\nconst styles = theme => ({\n  gmapsWindow: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  iconButton: {\n    alignSelf: 'center',\n  },\n})\n\nconst TheHeartOfKendall = { lat: 25.678167, lng: -80.404497 }\n\n/**\n * Street Address mode\n * - On valid value (shape {caption?, heart} )\n *   - query geocode with heart\n *   - saveInStateStreetAddressDetails\n * - On value empty\n *   - input shown empty -- { address: '', markerPosition: userCurrentLocation || null }\n * - On invalid value (shape diff from {caption?, heart} )\n *   - { showError: true, address: value, markerPosition: userCurrentLocation || null }\n *\n * Area Mode\n * - On valid value (areas array shape [ {caption?,heart,polygon} ])\n *   - set { currentAreaSelection: value }\n * - On empty value (areas = [])\n *   - set { currentAreaSelection: [] }\n * - On invalid value (shape diff from [ {caption?, heart, polygon} ])\n *   - set { currentAreaSelection: [] }\n */\n\nclass GmapsAddress extends Component {\n  constructor(props) {\n    super(props)\n    Geocode.setApiKey(props.apiKey)\n\n    this.state = {\n      address: undefined,\n      area: '',\n      city: '',\n      state: '',\n\n      mapPosition: TheHeartOfKendall,\n      markerPosition: TheHeartOfKendall,\n      mapViewport: null,\n\n      currentAreaSelection: undefined,\n      addedUserAreas: [],\n      userAreaOptions: null,\n\n      showAddressInput: true,\n      showChipAreaSelect: props.areaMode,\n      showChipAreaPicker: false,\n      showMap: false,\n      mapFirstShowing: true,\n      currentLocation: null,\n    }\n  }\n\n  async componentDidMount() {\n    const newState = await this.getStateFromProps(this.props)\n    this.setState(newState)\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    // chasing for data loading\n    if (!prevState.dataJustLoaded) {\n      const newState = await this.getStateFromProps(this.props)\n      if (\n        (this.props.areaMode === false && this.dataJustLoaded(prevState, newState, 'address')) ||\n        (this.props.areaMode && this.dataJustLoaded(prevState, newState, 'currentAreaSelection'))\n      ) {\n        let mapUpdates = {}\n        if (\n          this.props.areaMode &&\n          (isEmpty(newState.currentAreaSelection) && isEmpty(this.props.boundaries)) === false\n        ) {\n          const mapViewport = getMapViewportFromAreas([\n            ...newState.currentAreaSelection,\n            ...(this.props.boundaries || []),\n          ])\n          const mapViewportCenter = {\n            lat: (mapViewport.ne.lat + mapViewport.sw.lat) / 2,\n            lng: (mapViewport.ne.lng + mapViewport.sw.lng) / 2,\n          }\n          mapUpdates = { mapPosition: mapViewportCenter, markerPosition: mapViewportCenter, mapViewport }\n        }\n        if (this.props.areaMode === false) {\n          mapUpdates = { mapPosition: newState.markerPosition }\n        }\n\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({ ...prevState, ...newState, ...mapUpdates, dataJustLoaded: true })\n      }\n    }\n  }\n\n  dataJustLoaded = (prevData, newData, key) => prevData[key] === undefined && newData[key] !== undefined\n\n  getStateFromProps = async props => {\n    // AREA MODE\n    if (props.areaMode) {\n      const currentAreaSelection = ((Array.isArray(props.value) && props.value) || []).filter(x => validArea(x))\n      return { currentAreaSelection }\n    }\n\n    // STREET ADDRESS MODE\n    const address = getProp(props.value, 'caption', '')\n    const markerPosition = (validLocation(getProp(props.value, 'heart')) && props.value.heart) || TheHeartOfKendall\n    if (isEmpty(address) && !isEmpty(markerPosition)) {\n      const geoResp = await Geocode.fromLatLng(markerPosition.lat, markerPosition.lng)\n      return this.getStreetAddrPartsFromGeoResult(geoResp.results[0])\n    }\n    return { address, markerPosition }\n  }\n\n  getStreetAddrPartsFromGeoResult = geoResult => {\n    const addressArray = geoResult.address_components\n    return {\n      area:\n        (addressArray.find(x => x.types.some(t => ['sublocality_level_1', 'locality'].includes(t))) || {}).long_name ||\n        '',\n      city: (addressArray.find(x => x.types[0] === 'administrative_area_level_2') || {}).long_name || '',\n      state: (addressArray.find(x => x.types[0] === 'administrative_area_level_1') || {}).long_name || '',\n      address: geoResult.formatted_address,\n    }\n  }\n\n  /**\n   * When the marker is dragged you get the lat and long using the functions available from event object.\n   * Use geocode to get the address, city, area and state from the lat and lng positions.\n   * And then set those values in the state.\n   *\n   * @param event\n   */\n  handleMarkerDragEnd = async event => {\n    const newLat = event.latLng.lat()\n    const newLng = event.latLng.lng()\n    this.setState({\n      markerPosition: { lat: newLat, lng: newLng },\n    })\n\n    const geoCodeResp = await Geocode.fromLatLng(newLat, newLng)\n\n    if (this.props.areaMode === false) {\n      this.saveInStateStreetAddressDetails(newLat, newLng, geoCodeResp.results[0])\n      return\n    }\n\n    console.log('geoCodeResp - onPlaceSelected', geoCodeResp) // eslint-disable-line no-console\n    const userAreaOptions = this.getUserAreaOptionsFromGeocodeResponse(null, geoCodeResp)\n    this.setState({\n      userAreaOptions,\n      address: userAreaOptions[0].caption,\n      showChipAreaPicker: this.props.areaMode,\n    })\n  }\n\n  saveInStateStreetAddressDetails = (newLat, newLng, geoResult, updateMapPos) => {\n    const location = { lat: newLat, lng: newLng }\n    this.setState({\n      ...this.getStreetAddrPartsFromGeoResult(geoResult),\n      markerPosition: location,\n      ...(updateMapPos ? { mapPosition: location } : {}),\n    })\n  }\n\n  /**\n   * When the user types an address in the search box\n   * @param place\n   */\n  onPlaceSelected = async place => {\n    console.log('plc', place) // eslint-disable-line no-console\n    if (isEmpty(place.address_components)) {\n      return\n    }\n    const placeAddress = place.formatted_address\n    const latValue = place.geometry.location.lat()\n    const lngValue = place.geometry.location.lng()\n    console.log('onPlaceSelect - Place Address', placeAddress)\n\n    if (!this.props.areaMode) {\n      this.saveInStateStreetAddressDetails(latValue, lngValue, place, true)\n      return\n    }\n\n    const geoCodeResp = await Geocode.fromLatLng(latValue, lngValue)\n    console.log('geoCodeResp - onPlaceSelected', geoCodeResp) // eslint-disable-line no-console\n    const userAreaOptions = this.getUserAreaOptionsFromGeocodeResponse(placeAddress, geoCodeResp)\n    this.setState({\n      userAreaOptions,\n      address: userAreaOptions[0].caption,\n      markerPosition: userAreaOptions[0].heart,\n      showChipAreaPicker: true,\n    })\n  }\n\n  getUserAreaOptionsFromGeocodeResponse = (placeAddress, geoResp) => {\n    const levels = ['locality', 'administrative_area_level_2', 'administrative_area_level_1']\n    let minLevel = 0\n    if (placeAddress) {\n      const exactResult = geoResp.results.find(r => r.formatted_address === placeAddress)\n      console.log('exactResult', exactResult)\n      if (exactResult) {\n        minLevel = Math.max(levels.findIndex(l => exactResult.types.some(t => t === l)), 0)\n        // if (minLevel < 0) minLevel = 0\n      }\n    }\n\n    const userAreaOptions = []\n    console.log(geoResp.results)\n    // eslint-disable-next-line no-plusplus\n    for (let id = 0; id < 3 - minLevel; id++) {\n      const levelType = levels[minLevel + id]\n      const r = geoResp.results.find(z => z.types.some(t => t === levelType))\n      if (!r) continue // eslint-disable-line no-continue\n      const { lat: b, lng: a } = r.geometry.bounds.northeast\n      const { lat: y, lng: x } = r.geometry.bounds.southwest\n      userAreaOptions.push({\n        level: minLevel + id,\n        caption: r.formatted_address,\n        heart: { lat: r.geometry.location.lat, lng: r.geometry.location.lng },\n        polygon: [{ lat: b, lng: a }, { lat: b, lng: x }, { lat: y, lng: x }, { lat: y, lng: a }],\n      })\n    }\n    console.log(userAreaOptions)\n    return userAreaOptions\n  }\n\n  handleAddressChange = event => {\n    this.setState({ address: event.target.value })\n  }\n\n  captureCurrentLocationFromNavigator = async () =>\n    new Promise(resolve => {\n      if (!navigator.geolocation) {\n        resolve(null)\n      } else {\n        navigator.geolocation.getCurrentPosition(\n          position => {\n            resolve({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            })\n          },\n          () => resolve(null)\n        )\n      }\n    })\n\n  handleShowMapToggle = async () => {\n    let { showMap, mapFirstShowing, currentLocation } = this.state\n\n    this.setState(prev => ({ showMap: !prev.showMap }))\n\n    let currentLocationSetting = {}\n    if (showMap === false && mapFirstShowing) {\n      currentLocation = currentLocation || (await this.captureCurrentLocationFromNavigator()) || TheHeartOfKendall\n      currentLocationSetting = {\n        currentLocation,\n        markerPosition: currentLocation,\n        mapFirstShowing: false,\n      }\n    }\n\n    this.setState(currentLocationSetting)\n  }\n\n  handleAreaSelection = updatedAreaSelection => {\n    this.setState({ currentAreaSelection: [...updatedAreaSelection] })\n  }\n\n  handleAddNewArea = async () => {\n    this.setState({\n      showChipAreaSelect: false,\n      showChipAreaPicker: true,\n      loadingUserAreaOptions: true,\n    })\n\n    // using cached or capture current location ..\n    let { currentLocation } = this.state\n    let currentLocationSetting = {}\n    if (!currentLocation) {\n      currentLocation = (await this.captureCurrentLocationFromNavigator()) || TheHeartOfKendall\n      currentLocationSetting = { currentLocation }\n    }\n    let areaOptionsFromCurrentLocation = {}\n    if (!isEmpty(currentLocation)) {\n      const { lat, lng } = currentLocation\n      const geoCodeResp = await Geocode.fromLatLng(lat, lng)\n      areaOptionsFromCurrentLocation = {\n        userAreaOptions: this.getUserAreaOptionsFromGeocodeResponse(null, geoCodeResp),\n      }\n    }\n    this.setState({\n      ...currentLocationSetting,\n      ...areaOptionsFromCurrentLocation,\n      loadingUserAreaOptions: false,\n    })\n  }\n\n  addNewUserArea = newUserArea => {\n    this.setState(prev => {\n      let addedUserAreasUpdate = {}\n      if (!prev.addedUserAreas.some(x => x.caption === newUserArea.caption))\n        addedUserAreasUpdate = { addedUserAreas: [...prev.addedUserAreas, newUserArea] }\n      let currentAreaSelectionUpdate = {}\n      if (!prev.currentAreaSelection.some(x => x.caption === newUserArea.caption))\n        currentAreaSelectionUpdate = { currentAreaSelection: [...prev.currentAreaSelection, newUserArea] }\n\n      return {\n        ...addedUserAreasUpdate,\n        ...currentAreaSelectionUpdate,\n        showChipAreaSelect: true,\n        markerPosition: newUserArea.heart,\n        mapViewport: getMapViewportFromAreas([newUserArea]),\n      }\n    })\n  }\n\n  handleAreaRemoveOnMapWindow = areaId => {\n    this.setState(prev => ({\n      currentAreaSelection: [], // prev.currentAreaSelection.filter((x, i) => i !== areaId),\n    }))\n  }\n\n  handleAreaChangeOnMapWindow = (areaId, updatedPolygon) => {\n    this.setState(prev => {\n      const update = [...prev.currentAreaSelection]\n      update[areaId] = {\n        ...prev.currentAreaSelection[areaId],\n        polygon: updatedPolygon,\n      }\n      return {\n        currentAreaSelection: update,\n      }\n    })\n  }\n\n  handleEnterEditMode = () => {\n    this.setState({ showChipAreaPicker: false })\n  }\n\n  handleChipAreaPickerCancel = () => {\n    this.setState({ showChipAreaPicker: false, showChipAreaSelect: true })\n  }\n\n  render() {\n    const { classes, inputComponent, inputProps, boundaries, areaMode } = this.props\n    const inputPlaceholder = areaMode ? 'Search for an area center' : 'Enter your address'\n    const {\n      address,\n      currentAreaSelection,\n      addedUserAreas,\n      userAreaOptions,\n      loadingUserAreaOptions,\n      markerPosition,\n      mapViewport,\n      mapPosition,\n      showChipAreaSelect,\n      showChipAreaPicker,\n      showMap,\n    } = this.state\n    let boundariesAndUserAreas = []\n\n    // if (this.props.center.lat === undefined) {\n    //   return <div style={{ height: this.state.height }} />\n    // }\n\n    if (areaMode) {\n      boundariesAndUserAreas = [...boundaries, ...addedUserAreas]\n    }\n\n    return (\n      <div>\n        <div style={{ display: 'flex' }}>\n          {areaMode && showChipAreaSelect ? (\n            <ChipAreaSelect\n              inputProps={{ fullWidth: true }}\n              options={boundariesAndUserAreas}\n              currentSelection={currentAreaSelection || []}\n              onChange={this.handleAreaSelection}\n              onAddNewArea={this.handleAddNewArea}\n            />\n          ) : !showChipAreaPicker ? (\n            <GmapsAutocomplete\n              onPlaceSelected={this.onPlaceSelected}\n              inputComponent={inputComponent}\n              inputProps={{\n                fullWidth: true,\n                placeholder: inputPlaceholder,\n                value: address || '',\n                onChange: this.handleAddressChange,\n                ...inputProps,\n              }}\n            />\n          ) : (\n            areaMode &&\n            showChipAreaPicker && (\n              <ChipAreaPicker\n                userAreaOptions={userAreaOptions || []}\n                handleChipClick={this.addNewUserArea}\n                onEnterEditMode={this.handleEnterEditMode}\n                onCancel={this.handleChipAreaPickerCancel}\n                loading={loadingUserAreaOptions}\n              />\n            )\n          )}\n          <div className={classes.iconButton}>\n            <IconButton onClick={this.handleShowMapToggle} color=\"primary\" aria-label=\"map-pin-drop\">\n              <PinDrop />\n            </IconButton>\n          </div>\n        </div>\n        {showMap &&\n          (areaMode ? (\n            <GmapsAreaWindow\n              areas={currentAreaSelection}\n              boundaries={boundaries}\n              containerElement={<div style={{ height: this.props.height }} />}\n              mapElement={<div style={{ height: '100%' }} />}\n              mapPosition={mapPosition}\n              markerPosition={markerPosition}\n              onAreaChange={this.handleAreaChangeOnMapWindow}\n              onAreaRemove={this.handleAreaRemoveOnMapWindow}\n              onMarkerDragEnd={this.handleMarkerDragEnd}\n              zoom={this.props.zoom}\n              mapViewport={mapViewport}\n            />\n          ) : (\n            <GmapsWindow\n              containerElement={<div style={{ height: this.props.height }} />}\n              mapElement={<div style={{ height: '100%' }} />}\n              mapPosition={mapPosition}\n              markerPosition={markerPosition}\n              onMarkerDragEnd={this.handleMarkerDragEnd}\n              zoom={this.props.zoom}\n            />\n          ))}\n      </div>\n    )\n  }\n}\n\nGmapsAddress.propTypes = {\n  apiKey: PropTypes.string,\n  areaMode: PropTypes.bool,\n  height: PropTypes.string,\n  zoom: PropTypes.number,\n  inputComponent: PropTypes.elementType,\n  inputProps: PropTypes.object,\n  value: PropTypes.any,\n}\n\nGmapsAddress.defaultProps = {\n  areaMode: false,\n  height: '600px',\n  zoom: 15,\n  inputComponent: GmapsAddressInput,\n  inputProps: {},\n}\n\nexport default withStyles(styles)(withGmapsContext(GmapsAddress))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { IntlProvider } from 'react-intl'\n\n/**\n * LanguageProvider\n *\n * This component connects the redux state language locale to the\n * IntlProvider component and i18n messages (loaded from `app/translations`)\n */\nexport default class LanguageProvider extends React.PureComponent {\n  // eslint-disable-line react/prefer-stateless-function\n  render() {\n    const formats = {\n      number: {\n        USD: {\n          style: 'currency',\n          currency: 'USD',\n        },\n      },\n    }\n    return (\n      <IntlProvider\n        formats={formats}\n        defaultFormats={formats}\n        locale={this.props.locale}\n        key={this.props.locale}\n        messages={this.props.messages[this.props.locale]}\n      >\n        {React.Children.only(this.props.children)}\n      </IntlProvider>\n    )\n  }\n}\n\nLanguageProvider.propTypes = {\n  /** Locale of the language, 2 characters, defaults to 'en' */\n  locale: PropTypes.string,\n  /** Internationalized messages */\n  messages: PropTypes.object,\n  /** The content of the LanguageProvider */\n  children: PropTypes.element.isRequired,\n}\nLanguageProvider.defaultProps = {\n  locale: 'en',\n}\n","/**\n * TO BE RENAMED GmapsAddress\n */\nimport React, { useState } from 'react'\nimport { Paper, makeStyles, Typography, Divider } from '@material-ui/core'\nimport GmapsAddress from './GmapsAddress'\nimport WithGoogleApi from './WithGoogleApi'\nimport LanguageProvider from './LanguageProvider'\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    display: 'block',\n    marginLeft: '25%',\n    padding: theme.spacing(3),\n    width: '50%',\n  },\n  component: {\n    width: '100%',\n    height: '100%',\n  },\n  sections: {\n    padding: theme.spacing(1),\n  },\n  divider: {\n    margin: theme.spacing(1),\n  },\n}))\n\nconst sampleData = {\n  vendorStreetAddress: {\n    caption: '15e Arrondissement de Paris, 75015 Paris, France',\n    heart: { lat: 25.684192318072125, lng: -80.39375118467146 },\n  },\n  vendorServiceAreas: [\n    // {\n    //   caption: 'Kendall, Fl',\n    //   heart: { lat: 25.664112, lng: -80.356857 },\n    //   polygon: [\n    //     { lat: 25.634253, lng: -80.388439 },\n    //     { lat: 25.632716, lng: -80.309863 },\n    //     { lat: 25.705581, lng: -80.304534 },\n    //     { lat: 25.703632, lng: -80.387227 },\n    //   ],\n    // },\n    // {\n    //   caption: 'Coral Gables, Fl',\n    //   heart: { lat: 25.746895, lng: -80.267322 },\n    //   polygon: [\n    //     { lat: 25.633666, lng: -80.303403 },\n    //     { lat: 25.628092, lng: -80.28007 },\n    //     { lat: 25.706354, lng: -80.242616 },\n    //     { lat: 25.772882, lng: -80.254253 },\n    //     { lat: 25.764537, lng: -80.288614 },\n    //   ],\n    // },\n  ],\n}\n\nconst App = () => {\n  const [streetAddr, setStreetAddr] = useState(sampleData.vendorStreetAddress)\n  const [serviceAreas, setServiceAreas] = useState([sampleData.vendorServiceAreas[1]])\n  const classes = useStyles()\n\n  return (\n    <Paper className={classes.paper}>\n      <LanguageProvider messages={{} /* messages> */}>\n        <WithGoogleApi apiKey=\"AIzaSyC43U2-wqXxYEk1RBrTLdkYt3aDoOxO4Fw\">\n          {/* AREA SELECTION MODE */}\n          {/* TODO:  I WAS ABLE TO ADD SEVERAL MIAMI-DADE COUNTY TO THE ADDED USER AREA LIST,\n           * EVEN WHEN THEY DIDN'T APPEAR AS A SELECTED CHIP */}\n          {/* FIXME: ENTERING ADDRESS AND HITTING ENTER DOESNT CENTER THE MAP ON NEW MARKER POSITION */}\n          {/* <Typography className={classes.sections}>AREA MODE</Typography>\n          <GmapsAddress\n            areaMode\n            className={classes.component}\n            boundaries={sampleData.vendorServiceAreas}\n            value={serviceAreas}\n            onChange={setServiceAreas}\n          />\n\n          <Divider className={classes.divider} variant=\"middle\"></Divider> */}\n\n          <Typography className={classes.sections}>Entrer l'adresse</Typography>\n          <GmapsAddress className={classes.component} value={streetAddr} onChange={setStreetAddr} />\n        </WithGoogleApi>\n      </LanguageProvider>\n    </Paper>\n  )\n}\n\nexport default App\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./components/App\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}